question 1
#include <iostream>
using namespace std;
void reverseArray(int arr[], int size) {
    int start = 0;
    int end = size - 1;
    while (start < end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}
int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = sizeof(arr) / sizeof(arr[0]);

    cout << "Original array: ";
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
    reverseArray(arr, size);
    cout << "Reversed array: ";
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}
question 2
#include <iostream>
using namespace std;
int main() {
    int arr[] = {12, 45, 2, 67, 34, 89, 5};
    int size = sizeof(arr)/sizeof(arr[0]);
    int max = arr[0];
    int min = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > max)
            max = arr[i];
        if (arr[i] < min)
            min = arr[i];
    }
    cout << "Maximum element: " << max << endl;
    cout << "Minimum element: " << min << endl;
    return 0;
}
question 3
#include <iostream>
#include <algorithm>
using namespace std;
int main() {
    int arr[] = {7, 2, 9, 4, 1, 5, 3};
    int size = sizeof(arr) / sizeof(arr[0]);
    int k = 3;
    sort(arr, arr + size);
    cout << "Kth minimum element: " << arr[k - 1] << endl;
    cout << "Kth maximum element: " << arr[size - k] << endl;
    return 0;
}
question 4
#include <iostream>
using namespace std;
void sort012(int arr[], int size) {
    int low = 0, mid = 0, high = size - 1;
    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr[low], arr[mid]);
            low++;
            mid++;
        } else if (arr[mid] == 1) {
            mid++;
        } else {
            swap(arr[mid], arr[high]);
            high--;
        }
    }
}
int main() {
    int arr[] = {2, 0, 2, 1, 1, 0};
    int size = sizeof(arr) / sizeof(arr[0]);
    sort012(arr, size);
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}
question 5
#include <iostream>
using namespace std;
void moveNegatives(int arr[], int size) {
    int j = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] < 0) {
            if (i != j) {
                swap(arr[i], arr[j]);
            }
            j++;
        }
    }
}
int main() {
    int arr[] = {1, -3, 5, -2, -8, 6, 10, -11};
    int size = sizeof(arr) / sizeof(arr[0]);
    moveNegatives(arr, size);
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}
question 6
#include <iostream>
using namespace std;
void printUnion(int arr1[], int arr2[], int n1, int n2) {
    int i = 0, j = 0;
    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j])
            cout << arr1[i++] << " ";
        else if (arr2[j] < arr1[i])
            cout << arr2[j++] << " ";
        else {
            cout << arr1[i] << " ";
            i++;
            j++;
        }
    }
    while (i < n1)
        cout << arr1[i++] << " ";
    while (j < n2)
        cout << arr2[j++] << " ";
    cout << endl;
}
void printIntersection(int arr1[], int arr2[], int n1, int n2) {
    int i = 0, j = 0;
    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j])
            i++;
        else if (arr2[j] < arr1[i])
            j++;
        else {
            cout << arr1[i] << " ";
            i++;
            j++;
        }
    }
    cout << endl;
}
int main() {
    int arr1[] = {1, 2, 4, 5, 6};
    int arr2[] = {2, 3, 5, 7};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    cout << "Union: ";
    printUnion(arr1, arr2, n1, n2);
    cout << "Intersection: ";
    printIntersection(arr1, arr2, n1, n2);
    return 0;
}
question 7
#include <iostream>
using namespace std;
void rotateByOne(int arr[], int size) {
    int last = arr[size - 1];
    for (int i = size - 1; i > 0; i--) {
        arr[i] = arr[i - 1];
    }
    arr[0] = last;
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    rotateByOne(arr, size);
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}
question 8
#include <iostream>
using namespace std;
int maxSubArraySum(int arr[], int size) {
    int maxSoFar = arr[0];
    int currentMax = arr[0];
    for (int i = 1; i < size; i++) {
        currentMax = max(arr[i], currentMax + arr[i]);
        maxSoFar = max(maxSoFar, currentMax);
    }
    return maxSoFar;
}
int main() {
    int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3};
    int size = sizeof(arr) / sizeof(arr[0]);

    int maxSum = maxSubArraySum(arr, size);
    cout << "Maximum contiguous subarray sum is: " << maxSum << endl;
    return 0;
}

